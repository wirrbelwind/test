type Query {
  artist(id: Int!): Artist
  artists: [Artist!]!
}

type Mutation {
  createArtist(data: CreateArtistInput!): Artist!
  updateArtist(id: Int!, data: UpdateArtistInput!): Artist!
  deleteArtist(id: Int!): Artist!
}

type Account {
  id: Int!
  listener: Listener
  artist: Artist
}

type Listener {
  id: Int!
  accountId: Int!
  account: Account!
  followedArtists: [Artist!]!
  likedArtistCollections: [ArtistCollection!]!
  likedGenreCollections: [GenreCollection!]!
  likedAudios: [Audio!]!
  recommendations: [Audio!]!
  newReleases: [Audio!]!
}

type Artist {
  id: Int!
  accountId: Int!
  account: Account!
  collections: [ArtistCollection!]!
  followers: [Listener!]!
}

type ArtistCollection {
  id: Int!
  type: ArtistCollectionType!
  audios: [Audio!]!
  artists: [Artist!]!
  listeners: [Listener!]!
  genres: [Genre!]!
}

enum ArtistCollectionType {
  single
  ep
  album
  podcast
}

type Genre {
  id: Int!
  title: String!
  genreCollections: [GenreCollection!]!
  artistCollections: [ArtistCollection!]!
}

type GenreCollection {
  id: Int!
  title: String!
  description: String
  avatarUrl: String
  audios: [Audio!]!
  listeners: [Listener!]!
  genres: [Genre!]!
}

type Audio {
  id: Int!
  title: String!
  url: String!
  artistCollectionId: Int
  artistCollection: ArtistCollection
  genreCollection: [GenreCollection!]!
  tags: [AudioTag!]!
  likedBy: [Listener!]!
  recommendedTo: [Listener!]!
  releasedTo: [Listener!]!
}

type AudioTag {
  id: Int!
  name: String!
  audios: [Audio!]!
}

input CreateArtistInput {
  accountId: Int!
}

input UpdateArtistInput {
  accountId: Int
}
