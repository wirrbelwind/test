datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:postgres@localhost:5432/postgres?schema=publicDATABASE_URL"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id       String      @id @default(uuid())
  listener Listener?
  artist   Artist?
  email String
  passwordHash String
  salt String
}

model Listener {
  id Int @id @default(autoincrement())
  accountId String @unique
  account Account @relation(fields: [accountId], references: [id])
  followedArtists Artist[] @relation("Listeners_Artists")
  likedArtistCollections ArtistCollection[] @relation("Listeners_LikedArtistCollections")
  likedGenreCollections GenreCollection[] @relation("Listeners_Liked_GenreCollections")
  likedAudios Audio[] @relation("Listeners_Liked_Audios")
  recommendations Audio[] @relation("Listeners_Recommended_audios")
  newReleases Audio[] @relation("Listener_Released_Audios")
  username String
  avatarUrl String
}

model Artist {
  id                Int                  @id @default(autoincrement())
  accountId         String                  @unique
  account           Account              @relation(fields: [accountId], references: [id])
  collections       ArtistCollection[]   @relation("Artist_ArtistCollections")
  followers         Listener[]           @relation("Listeners_Artists")
  username String
  avatarUrl String
}

model ArtistCollection {
  id                Int                   @id @default(autoincrement())
  type ArtistCollectionType
  audios            Audio[] @relation("Audios_ArtistCollections")
  artists           Artist[] @relation("Artist_ArtistCollections")
  listeners         Listener[]            @relation("Listeners_LikedArtistCollections")
  genres Genre[] @relation("Genres_ArtistCollections")
}

enum ArtistCollectionType {
  single
  ep
  album
  podcast
}
model Genre {
  id          Int      @id @default(autoincrement())
  title String
  genreCollections GenreCollection[] @relation("Genres_GenreCollections")
  artistCollections ArtistCollection[] @relation("Genres_ArtistCollections")
}
model GenreCollection {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  avatarUrl   String?
  audios      Audio[] @relation("Audios_GenreCollections")
  listeners Listener[] @relation("Listeners_Liked_GenreCollections")
  genres Genre[] @relation("Genres_GenreCollections")
}

model Audio {
  id Int @id @default(autoincrement())
  title String
  url String
  artistCollectionId Int?
  artistCollection ArtistCollection?    @relation(name: "Audios_ArtistCollections", fields: [artistCollectionId], references: [id])
  genreCollection GenreCollection[] @relation("Audios_GenreCollections")
  tags AudioTag[]
  likedBy Listener[] @relation("Listeners_Liked_Audios")
  recommendedTo Listener[] @relation("Listeners_Recommended_audios")
  releasedTo Listener[] @relation("Listener_Released_Audios")
}

model AudioTag {
  id        Int    @id @default(autoincrement())
  name      String
  audios    Audio[]
}